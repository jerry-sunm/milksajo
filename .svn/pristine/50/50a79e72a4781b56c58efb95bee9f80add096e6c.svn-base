package com.milk.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.milk.dto.ProductDTO;

public class ProductDAO extends JdbcDAO {
	private static ProductDAO _dao;
	
	public ProductDAO() {
		// TODO Auto-generated constructor stub
	}
	
	static {
		_dao = new ProductDAO();
	}
	
	public static ProductDAO getDAO() {
		return _dao;
	}
	
	//새로운 제품을 추가하기 위한 메소드
	public int insertProduct(ProductDTO product) {
		Connection con =null;
		PreparedStatement pstmt = null;
		int rows = 0;
		try {
			con = getConnection();
			
			String sql = "insert into product values(?, ?, ?, ?, ?, ?, ?, ?)";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, product.getpSerial_no());
			pstmt.setString(2, product.getpDivision());
			pstmt.setString(3, product.getpName());
			pstmt.setString(4, product.getpOrigin());
			pstmt.setInt(5, product.getpSize());
			pstmt.setInt(6, product.getpPrice());
			pstmt.setInt(7, product.getpAmount());
			pstmt.setInt(8, product.getpSaleAmount());
			
			rows = pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]insertProduct() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
	
	//제품의 정보를 수정하는 메소드
	public int updateProduct(ProductDTO product) {
		Connection con =null;
		PreparedStatement pstmt = null;
		int rows = 0;
		try {
			con = getConnection();
			
			String sql = "update product set p_division=?, p_name=?,  p_origin=?, p_size=?, p_price=?, p_amount=?, p_sale_amount=? where p_serial_no=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, product.getpDivision());
			pstmt.setString(2, product.getpName());
			pstmt.setString(3, product.getpOrigin());
			pstmt.setInt(4, product.getpSize());
			pstmt.setInt(5, product.getpPrice());
			pstmt.setInt(6, product.getpAmount());
			pstmt.setInt(7, product.getpSaleAmount());
			pstmt.setInt(8, product.getpSerial_no());
			
			rows = pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]updateProduct() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
	
	
	//제품 수량 수정 메소드
	public int updateAmunt(String name) {
		Connection con =null;
		PreparedStatement pstmt = null;
		int rows = 0;
		try {
			con = getConnection();
			
			String sql = "update product set p_amount=p_amount-1, p_sale_amount=p_sale_amount+1 where p_name=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, name);
			
			rows = pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]updateAmunt() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
	
	
	
	//해당 제품 삭제 메소드
	public int deleteProduct(ProductDTO product) {
		Connection con =null;
		PreparedStatement pstmt = null;
		int rows = 0;
		try {
			con = getConnection();
			
			String sql = "delete from product where p_serial_no=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, product.getpSerial_no());
			
			rows = pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]deleteProduct() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}
	
	
	//모든 제품 검색 메소드
	public List<ProductDTO> selectAllProduct() {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		List<ProductDTO> productList = new ArrayList<ProductDTO>();
		try {
			con = getConnection();
			
			String sql = "select * from product order by p_serial_no";
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				ProductDTO product = new ProductDTO();
				product.setpSerial_no(rs.getInt("pSerial_no"));
				product.setpDivision(rs.getString("pDivision"));
				product.setpName(rs.getString("pName"));
				product.setpOrigin(rs.getString("pOrigin"));
				product.setpSize(rs.getInt("pSize"));
				product.setpPrice(rs.getInt("pPrice"));
				product.setpAmount(rs.getInt("pAmount"));
				product.setpSaleAmount(rs.getInt("pSaleAmount"));
				productList.add(product);
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectAllProduct() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return productList;
	}
	
	
	//특정 상품 검색 메소드
	//select * from product where p_name like ? || '%' order by p_serial_no
	public List<ProductDTO> selectProduct(String name) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		List<ProductDTO> productList = new ArrayList<ProductDTO>();
		try {
			con = getConnection();
			
			String sql = "select * from product where p_name like ? || '%' order by p_serial_no";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, name);
			
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				ProductDTO product = new ProductDTO();
				product.setpSerial_no(rs.getInt("pSerial_no"));
				product.setpDivision(rs.getString("pDivision"));
				product.setpName(rs.getString("pName"));
				product.setpOrigin(rs.getString("pOrigin"));
				product.setpSize(rs.getInt("pSize"));
				product.setpPrice(rs.getInt("pPrice"));
				product.setpAmount(rs.getInt("pAmount"));
				product.setpSaleAmount(rs.getInt("pSaleAmount"));
				productList.add(product);
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectProduct() 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return productList;
	}
	
	
}
